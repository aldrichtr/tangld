#+TITLE: tangld: A literate config system built on emacs and org-mode
#+AUTHOR: Timothy Aldrich
#+EMAIL: timothy.r.aldrich@gmail.com
#+INDEX: Projects!Tools
#+STARTUP: hidestars
#+FILETAGS: org dev emacs

 | Status: | Under Development |
 | Location: | [[https://github.com/aldrichtr/tangld][github]] |
 | Version: | 0.0.1 |

* Introduction
  Manage all of your dotfiles using emacs and org-mode.  tangld blends the concept
  of a dotfiles manager with the concept of literate programming.  The result is
  a system similar to the software development cycle, but for the configuration
  of your system.
  - org-mode files :: source files containing org headings and /src blocks/
  - dotfiles :: the "output" of the tangle process (your configuration files)
  - library of babel :: org-mode files containing functions and data for use by
    the tangle process.


  |              | gcc                   | tangld     | notes                             |
  |--------------+-----------------------+------------+-----------------------------------|
  | source file  | source.c              | source.org | flat text files with              |
  |              |                       |            | instructions for the compiler     |
  | library file | lib.h                 | lib.org    | functions used in the source file |
  | output file  | hello(.so, .exe, etc) | .tmux.conf | the result of the build           |


  #+BEGIN_EXAMPLE
  $> gcc -o hello source.c
  $> ./hello
  $> Hello World!
  #+END_EXAMPLE


  #+BEGIN_EXAMPLE
  M-x load-file source.org
  M-x tangld-build
  $> tmux source-file ~/.tmux.conf # reload tmux config to see your changes
  #+END_EXAMPLE

  Obviously, this is a very simple one-file example.  For more complex projects,
  there are /build systems/ such as make etc.

  A build system allows you to define all the files that need to be compiled,
  the order in which they are to be compiled, compiler options etc. as well as
  defining other tasks related to managing the project such as configuration,
  cleanup, install, uninstall etc.

  This is what tangld does for your dotfiles.



* The tangld workflow(s)
  As much as possible, tangld attempts to match the workflow of other build
  systems.

   The first time running tangld on a system:
   - init :: Create a new instance of a tangld project on the system.
     Set up the directories, files, and settings tangld uses to create dotfiles.

   Anytime you want to change the way tangld operates
   - config :: Setup the tangld project.  Identify settings used by other
     tangld functions.

   After that, just add/modify source and lib files and create output:
   - build :: Load library files, tangle source files, write output.


* Installing / Getting started
  This is a very new project, so the install process is not really built out yet.
  The intent is to get the first stable release into melpa for distribution through
  =emacs' packaging system=, but until then, you can try it out using:
  #+BEGIN_SRC sh
  : git clone https://github.com/aldrichtr/tangld.git
  #+END_SRC
  and then, load it manually in to emacs
  #+BEGIN_SRC emacs-lisp
  : ;; in your emacs init
  : (add-to-list 'load-path "/path/to/tangld/lib/elisp)
  : (require 'tangld)
  #+END_SRC
* Usage
  Please see [[file:doc/tangld-manual.org][the manual]]

* Contributing
  First of all, thank you very much for your interest in tangld! Issues, Bugs, and
  Feature Requests are wanted, please submit them [[https://github.com/aldrichtr/tangld/issues][here or github]] . If you'd like to
  contribute to documentation or development, that is also welcome.

  Please see [[CONTRIBUTING.org]] for those details.

* License
  [[http://www.opensource.org/licenses/mit-license.php][MIT License]]
* Credits
  - Tyler Ware :: When I went looking for a literate config system [[https://github.com/tylerware/dotfiles][Tyler's dotfiles]]
    already had many of the features I wanted.  He has many improvements to the tangle
    function, and some really great features I didn't even know I wanted.  I used that
    code as the basis for this project.
  - Diego Zamboni :: Literally wrote [[https://leanpub.com/lit-config][the book]] on literate config.
